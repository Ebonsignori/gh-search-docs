name: Release
on:
  workflow_dispatch:
    inputs:
      force_version:
        description: "Force a specific version (e.g., 1.2.3) - leave empty for AI analysis"
        required: false
        type: string
      force_bump:
        description: "Force a specific version bump type"
        required: false
        type: choice
        options:
          - ""
          - major
          - minor
          - patch
  push:
    tags:
      - "v*"

permissions:
  contents: write
  id-token: write
  attestations: write
  models: read

jobs:
  analyze-release:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.analysis.outputs.should-release }}
      new-version: ${{ steps.analysis.outputs.new-version }}
      version-bump: ${{ steps.analysis.outputs.version-bump }}
      release-notes: ${{ steps.analysis.outputs.release-notes }}
      is-tag-push: ${{ steps.analysis.outputs.is-tag-push }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for git operations

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: |
          cd scripts
          npm install

      - name: Analyze changes for release
        id: analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_MODELS_MODEL: "openai/gpt-4.1"
        run: |
          cd scripts

          # Check if this is a tag push
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "üè∑Ô∏è Tag push detected: ${{ github.ref_name }}"
            TAG_VERSION="${{ github.ref_name }}"
            # Remove 'v' prefix if present
            CLEAN_VERSION=${TAG_VERSION#v}

            # Set tag-specific environment variable for the script
            export TAG_BASED_RELEASE="true"
            export TAG_VERSION="$CLEAN_VERSION"

            npm run analyze-release
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "is-tag-push=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "is-tag-push=false" >> $GITHUB_OUTPUT

          # Check if this is a manual dispatch with forced version/bump
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ -n "${{ github.event.inputs.force_version }}" ]]; then
              echo "üîß Manual release with forced version: ${{ github.event.inputs.force_version }}"
              export FORCE_VERSION="${{ github.event.inputs.force_version }}"
              npm run analyze-release
              echo "should-release=true" >> $GITHUB_OUTPUT
              exit 0
            elif [[ -n "${{ github.event.inputs.force_bump }}" ]]; then
              echo "üîß Manual release with forced bump: ${{ github.event.inputs.force_bump }}"
              export FORCE_BUMP="${{ github.event.inputs.force_bump }}"
              npm run analyze-release
              echo "should-release=true" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi

          # Run the AI analysis
          if ! npm run analyze-release; then
            echo "‚ùå Analysis script failed"
            echo "should-release=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Check if we have a new version (indicating changes were found)
          if [[ -f "release-analysis.json" ]]; then
            # Validate JSON file first
            if ! jq empty release-analysis.json 2>/dev/null; then
              echo "‚ùå Invalid JSON in release-analysis.json"
              echo "should-release=false" >> $GITHUB_OUTPUT
              exit 1
            fi

            NEW_VERSION=$(cat release-analysis.json | jq -r '.new_version')
            VERSION_BUMP=$(cat release-analysis.json | jq -r '.version_bump')
            RELEASE_NOTES=$(cat release-analysis.json | jq -r '.release_notes')

            # Set outputs that are always available
            echo "new-version=${NEW_VERSION}" >> $GITHUB_OUTPUT
            echo "version-bump=${VERSION_BUMP}" >> $GITHUB_OUTPUT
            echo "release-notes<<EOF" >> $GITHUB_OUTPUT
            echo "${RELEASE_NOTES}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

            if [[ "$NEW_VERSION" != "null" && "$NEW_VERSION" != "" ]]; then
              echo "‚úÖ Release recommended: version $NEW_VERSION"
              echo "should-release=true" >> $GITHUB_OUTPUT
            else
              echo "‚ÑπÔ∏è No release needed - no significant changes detected"
              echo "should-release=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ùå Analysis file not created"
            echo "should-release=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  test-and-lint:
    needs: analyze-release
    if: needs.analyze-release.outputs.should-release == 'true'
    uses: Ebonsignori/gh-search-docs/.github/workflows/test-and-lint.yml@main

  create-tag:
    needs: [analyze-release, test-and-lint]
    if: needs.analyze-release.outputs.should-release == 'true' && needs.analyze-release.outputs.is-tag-push != 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push tag
        run: |
          NEW_VERSION="${{ needs.analyze-release.outputs.new-version }}"

          # Validate version format
          if [[ ! "$NEW_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid version format: $NEW_VERSION"
            exit 1
          fi

          # Check if tag already exists
          if git rev-parse "v${NEW_VERSION}" >/dev/null 2>&1; then
            echo "‚ùå Tag v${NEW_VERSION} already exists"
            exit 1
          fi

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          echo "üì¶ Creating and pushing tag v${NEW_VERSION}"
          git tag "v${NEW_VERSION}"
          git push origin "v${NEW_VERSION}"

  release:
    needs: [analyze-release, test-and-lint]
    if: needs.analyze-release.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --tags

      - uses: cli/gh-extension-precompile@v2
        with:
          generate_attestations: true
          go_version_file: go.mod

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ needs.analyze-release.outputs.new-version }}
          VERSION_BUMP: ${{ needs.analyze-release.outputs.version-bump }}
          RELEASE_NOTES: ${{ needs.analyze-release.outputs.release-notes }}
        run: |
          # Validate inputs
          if [[ -z "$NEW_VERSION" || -z "$VERSION_BUMP" || -z "$RELEASE_NOTES" ]]; then
            echo "‚ùå Missing required release information"
            echo "Version: $NEW_VERSION"
            echo "Bump: $VERSION_BUMP"
            echo "Notes length: ${#RELEASE_NOTES}"
            exit 1
          fi

          echo "üöÄ Updating GitHub Release v${NEW_VERSION}"

          # Update the existing release created by gh-extension-precompile with AI-generated notes
          if gh release edit "v${NEW_VERSION}" \
            --title "Release v${NEW_VERSION} (${VERSION_BUMP})" \
            --notes "$RELEASE_NOTES" \
            --latest; then
            echo "‚úÖ Release v${NEW_VERSION} updated successfully"
          else
            echo "‚ùå Failed to update release"
            exit 1
          fi
